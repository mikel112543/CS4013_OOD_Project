import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Scanner;

public class reservationUserInput {
    protected int resNumber;        //1
    protected String nameOnRes;     //2
    protected String resType;       //3

    protected int year;             //4
    protected int month;
    protected int day;
    protected String checkInDay;

    protected int numberOfNights;   //5
    protected int numberOfRooms;    //6
    private int hotel;
    protected String roomType;    //7
    protected int adultOcc;
    protected int childOcc;
    protected boolean breakfast;

    protected int totalCost;        //8
    protected int deposit;          //9

    public void getUserInput(){

        Scanner input = new Scanner(System.in);
        System.out.println("What name will be on the reservation?");
        nameOnRes = input.next();

        System.out.println("What type of Reservation method will you be using? " + "\n S)Standard Booking" + "\n AP)Advanced Purchase");
        resType = input.next().toUpperCase();

        System.out.println("How many nights will you be staying for?");
        numberOfNights = input.nextInt();

        System.out.println("Year of Check-In?");
        year = input.nextInt();
        System.out.println("Month of Check-In? (1-12)");
        month = input.nextInt();
        if(month == 4 || month == 6 || month == 9 || month ==11){
            System.out.println("Day of Check-In? (1-30)");
        }
        else if(month == 2 && year % 4 == 0){
            System.out.println("Day of Check-In? (1-29");
        }
        else if(month == 2 && year % 4 != 0){
            System.out.println("Day of Check-In? (1-28)");
        }
        else {
            System.out.println("Day of Check-In? (1-31");
        }
        day = input.nextInt();

        if(month == 1 || month == 2){
            month = (month == 1) ? 13:14;
            year--;
        }
        int dayOfWeek = (day + (26 * (month + 1)) / 10 + (year % 100)
                + (year % 100) / 4 + (year / 100) / 4 + 5 * (year / 100)) % 7;

        switch(dayOfWeek){
            case 0: checkInDay = ("Saturday"); break;
            case 1: checkInDay = ("Sunday"); break;
            case 2: checkInDay = ("Monday"); break;
            case 3: checkInDay = ("Tuesday"); break;
            case 4: checkInDay = ("Wednesday"); break;
            case 5: checkInDay = ("Thursday"); break;
            case 6: checkInDay = ("Friday"); break;
        }



        System.out.println("How many rooms would you like to book?");
        numberOfRooms = input.nextInt();


        System.out.println("Select Star Hotel (5, 4, 3)");
        hotel = input.nextInt();

        String[] fiveStarHotel = new String []{"Deluxe Double" , "Deluxe Twin" , "Deluxe Single" , "Deluxe Family"};
        String[] fourStarHotel = new String[]{"Executive Double" , "Executive Twin" , "Executive Single"};
        String[] threeStarHotel = new String[]{"Classic Double" , "Classic Twin" , "Classic Single"};

        int i = 1;
        int typeOfRoom;
        while (i <= numberOfRooms) {
            System.out.println("Do you want breakfast for room " + i + "(Y/N)");
            String decision = input.next();
            breakfast = decision.equalsIgnoreCase("y");

            System.out.println("Select room type for room " + i);
            switch (hotel) {
                case 5:
                    for (int j = 0; j < fiveStarHotel.length; j++) {
                        System.out.print((j + 1)+ ")");
                        System.out.println(fiveStarHotel[j]);
                    }
                    typeOfRoom = input.nextInt();


                    switch (typeOfRoom) {
                        case 1:
                        case 2:
                        case 3:
                            occupancyDoubleSingleTwin(input, typeOfRoom);
                            roomType = fiveStarHotel[typeOfRoom - 1];
                            break;
                        default:
                            System.out.println("1 or 2 or 3 adults for this room");
                            adultOcc = input.nextInt();
                            System.out.println("1 or 0 children for this room");
                            childOcc = input.nextInt();
                            roomType = fiveStarHotel[typeOfRoom - 1];
                            break;
                    }
                    break;

                case 4:
                    for (int j = 0; j < fourStarHotel.length; j++) {
                        System.out.print((j + 1)+ ")");
                        System.out.println(fourStarHotel[j]);
                    }
                    typeOfRoom = input.nextInt();
                    occupancyDoubleSingleTwin(input, typeOfRoom);
                    roomType = fourStarHotel[typeOfRoom - 1];
                    break;
                default:
                    for (int j = 0; j < threeStarHotel.length; j++) {
                        System.out.print((j + 1)+ ")");
                        System.out.println(threeStarHotel[j]);
                    }
                    typeOfRoom = input.nextInt();
                    occupancyDoubleSingleTwin(input, typeOfRoom);
                    roomType = threeStarHotel[typeOfRoom - 1];


            }
            //method to get a priceOfRoom figure, and then add this as a parameter below. In that, you have a double called "totalPrice" and the price of each room is added to that.
            int priceOfOneRoom = getTotalPrice((String)roomType, (String) checkInDay, (int) numberOfNights);
            Room room = new Room(roomType, adultOcc, childOcc, breakfast, priceOfOneRoom);
            System.out.println(room.toString());
            i++;
            //method to add the room into the arraylist of rooms with parameters being "roomType, adultOcc, childOcc, breakfast, cost";
        }

    }

    public void occupancyDoubleSingleTwin(Scanner input, int typeOfRoom) {
        switch (typeOfRoom) {
            case 1:
                System.out.println("2 or 1 adult for this room");
                adultOcc = input.nextInt();
                System.out.println("Room occupies zero children...");
                childOcc = 0;
                break;
            case 2:
                System.out.println("2 or 1 adult for this room");
                adultOcc = input.nextInt();
                System.out.println("1 or 0 children for this room");
                childOcc = input.nextInt();
                break;
            default:
                System.out.println("Room occupies 1 adult...");
                adultOcc = 1;
                System.out.println("1 or 0 children for this room");
                childOcc = input.nextInt();
                break;
        }
    }

    public int getTotalPrice(String roomType, String checkInDay, int numberOfNights) {
        //WEEKS
        String[] allRooms = new String[]{"Deluxe Double", "Deluxe Twin", "Deluxe Single", "Deluxe Family", "Executive Double", "Executive Twin", "Executive Single", "Classic Double", "Classic Twin", "Classic Single"};
        int[] costPerWeek = new int[]{560, 560, 510, 600, 530, 530, 485, 490, 500, 410};
        int costOfRoomPerWeek = 0;
        for (int i = 0; i < allRooms.length; i++) {
            String temp = allRooms[i];
            if (temp.equals(roomType)) {
                costOfRoomPerWeek = costPerWeek[i];
            }
        }
        int noOfWeeks = numberOfNights / 7;
        int costForNumberOfWeeks = noOfWeeks * costOfRoomPerWeek;


        //DAYS
        int numberOfDays = numberOfNights % 7;
        int costForNumberOfDays = 0;
        int costForOneRoom = 0;
        String[] daysOfTheWeek = new String[]{"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday", "mon", "tues", "wed", "thurs", "fri", "sat", "sun"};
        int[] costForDaysOfTheWeek = new int[13];
        //costs for each RoomType is assigned these values, then put into costForDaysOfTheWeek depending on which room it is
        int[] costForDaysDDandDT = new int[]{75, 75, 75, 80, 90, 90, 75, 75, 75, 75, 80, 90, 90, 75};
        int[] costForDaysDS = new int[]{70, 70, 70, 75, 80, 80, 65, 70, 70, 70, 75, 80, 80, 65};
        int[] costForDaysDF = new int[]{80, 80, 80, 80, 100, 100, 80, 80, 80, 80, 80, 100, 100, 80};
        int[] costForDaysEDandET = new int[]{70, 70, 70, 70, 80, 85, 85, 70, 70, 70, 70, 80, 85, 85};
        int[] costForDaysES = new int[]{65, 65, 65, 65, 70, 75, 80, 65, 65, 65, 65, 70, 75, 80};
        int[] costForDaysCD = new int[]{65, 65, 70, 70, 80, 85, 65, 65, 65, 70, 70, 80, 85, 65};
        int[] costForDaysCT = new int[]{65, 65, 70, 70, 80, 85, 65, 65, 65, 70, 70, 80, 85, 65};
        int[] costForDaysCS = new int[]{50, 50, 50, 60, 75, 75, 50, 50, 50, 50, 60, 75, 75, 50};
        switch (roomType) {
            case "Deluxe Double":
            case "Deluxe Twin":
                for (int i = 0; i < costForDaysOfTheWeek.length; i++) {
                    costForDaysOfTheWeek[i] = costForDaysDDandDT[i];
                }
                break;
            case "Deluxe Single":
                for (int i = 0; i < costForDaysOfTheWeek.length; i++) {
                    costForDaysOfTheWeek[i] = costForDaysDS[i];
                }
                break;
            case "Deluxe Family":
                for (int i = 0; i < costForDaysOfTheWeek.length; i++) {
                    costForDaysOfTheWeek[i] = costForDaysDF[i];
                }
                break;
            case "Executive Double":
            case "Executive Twin":
                for (int i = 0; i < costForDaysOfTheWeek.length; i++) {
                    costForDaysOfTheWeek[i] = costForDaysEDandET[i];
                }
                break;
            case "Executive Single":
                for (int i = 0; i < costForDaysOfTheWeek.length; i++) {
                    costForDaysOfTheWeek[i] = costForDaysES[i];
                }
                break;
            case "Classic Double":
                for (int i = 0; i < costForDaysOfTheWeek.length; i++) {
                    costForDaysOfTheWeek[i] = costForDaysCD[i];
                }
                break;
            case "Classic Twin":
                for (int i = 0; i < costForDaysOfTheWeek.length; i++) {
                    costForDaysOfTheWeek[i] = costForDaysCT[i];
                }
                break;
            case "Classic Single":
                for (int i = 0; i < costForDaysOfTheWeek.length; i++) {
                    costForDaysOfTheWeek[i] = costForDaysCS[i];
                }
                break;
        }

        //this finds where to start on the daysOfTheWeek array.
        int b = 0; // b is the starting point
        for (int a = 0; a < daysOfTheWeek.length; a++) {
            if (daysOfTheWeek[a] == checkInDay) {
                b = a;
            }
        }
        int temp = numberOfDays;
        while (temp > 0) {
            int costOneDay = +costForDaysOfTheWeek[b];
            b++;
            temp--;
            costForNumberOfDays += costOneDay;
        }
        costForOneRoom = costForNumberOfDays + costForNumberOfWeeks;

        return costForOneRoom;
    }


}
